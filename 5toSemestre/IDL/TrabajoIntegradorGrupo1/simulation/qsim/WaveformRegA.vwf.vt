// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "07/17/2023 21:52:28"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    RegistroA
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module RegistroA_vlg_sample_tst(
	AM,
	AR,
	CLK,
	Fa,
	I,
	LoadA,
	Op,
	sampler_tx
);
input [3:0] AM;
input [3:0] AR;
input  CLK;
input [3:0] Fa;
input  I;
input  LoadA;
input [2:0] Op;
output sampler_tx;

reg sample;
time current_time;
always @(AM or AR or CLK or Fa or I or LoadA or Op)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module RegistroA_vlg_check_tst (
	A,
	E,
	sampler_rx
);
input [3:0] A;
input [3:0] E;
input sampler_rx;

reg [3:0] A_expected;
reg [3:0] E_expected;

reg [3:0] A_prev;
reg [3:0] E_prev;

reg [3:0] A_expected_prev;
reg [3:0] E_expected_prev;

reg [3:0] last_A_exp;
reg [3:0] last_E_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:2] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 2'b1;
end

// update real /o prevs

always @(trigger)
begin
	A_prev = A;
	E_prev = E;
end

// update expected /o prevs

always @(trigger)
begin
	A_expected_prev = A_expected;
	E_expected_prev = E_expected;
end


// expected A[ 3 ]
initial
begin
	A_expected[3] = 1'bX;
end 
// expected A[ 2 ]
initial
begin
	A_expected[2] = 1'bX;
end 
// expected A[ 1 ]
initial
begin
	A_expected[1] = 1'bX;
end 
// expected A[ 0 ]
initial
begin
	A_expected[0] = 1'bX;
end 
// expected E[ 3 ]
initial
begin
	E_expected[3] = 1'bX;
end 
// expected E[ 2 ]
initial
begin
	E_expected[2] = 1'bX;
end 
// expected E[ 1 ]
initial
begin
	E_expected[1] = 1'bX;
end 
// expected E[ 0 ]
initial
begin
	E_expected[0] = 1'bX;
end 
// generate trigger
always @(A_expected or A or E_expected or E)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected A = %b | expected E = %b | ",A_expected_prev,E_expected_prev);
	$display("| real A = %b | real E = %b | ",A_prev,E_prev);
`endif
	if (
		( A_expected_prev[0] !== 1'bx ) && ( A_prev[0] !== A_expected_prev[0] )
		&& ((A_expected_prev[0] !== last_A_exp[0]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port A[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", A_expected_prev);
		$display ("     Real value = %b", A_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_A_exp[0] = A_expected_prev[0];
	end
	if (
		( A_expected_prev[1] !== 1'bx ) && ( A_prev[1] !== A_expected_prev[1] )
		&& ((A_expected_prev[1] !== last_A_exp[1]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port A[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", A_expected_prev);
		$display ("     Real value = %b", A_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_A_exp[1] = A_expected_prev[1];
	end
	if (
		( A_expected_prev[2] !== 1'bx ) && ( A_prev[2] !== A_expected_prev[2] )
		&& ((A_expected_prev[2] !== last_A_exp[2]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port A[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", A_expected_prev);
		$display ("     Real value = %b", A_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_A_exp[2] = A_expected_prev[2];
	end
	if (
		( A_expected_prev[3] !== 1'bx ) && ( A_prev[3] !== A_expected_prev[3] )
		&& ((A_expected_prev[3] !== last_A_exp[3]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port A[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", A_expected_prev);
		$display ("     Real value = %b", A_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_A_exp[3] = A_expected_prev[3];
	end
	if (
		( E_expected_prev[0] !== 1'bx ) && ( E_prev[0] !== E_expected_prev[0] )
		&& ((E_expected_prev[0] !== last_E_exp[0]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port E[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", E_expected_prev);
		$display ("     Real value = %b", E_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_E_exp[0] = E_expected_prev[0];
	end
	if (
		( E_expected_prev[1] !== 1'bx ) && ( E_prev[1] !== E_expected_prev[1] )
		&& ((E_expected_prev[1] !== last_E_exp[1]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port E[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", E_expected_prev);
		$display ("     Real value = %b", E_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_E_exp[1] = E_expected_prev[1];
	end
	if (
		( E_expected_prev[2] !== 1'bx ) && ( E_prev[2] !== E_expected_prev[2] )
		&& ((E_expected_prev[2] !== last_E_exp[2]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port E[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", E_expected_prev);
		$display ("     Real value = %b", E_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_E_exp[2] = E_expected_prev[2];
	end
	if (
		( E_expected_prev[3] !== 1'bx ) && ( E_prev[3] !== E_expected_prev[3] )
		&& ((E_expected_prev[3] !== last_E_exp[3]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port E[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", E_expected_prev);
		$display ("     Real value = %b", E_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_E_exp[3] = E_expected_prev[3];
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#1000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module RegistroA_vlg_vec_tst();
// constants                                           
// general purpose registers
reg [3:0] AM;
reg [3:0] AR;
reg CLK;
reg [3:0] Fa;
reg I;
reg LoadA;
reg [2:0] Op;
// wires                                               
wire [3:0] A;
wire [3:0] E;

wire sampler;                             

// assign statements (if any)                          
RegistroA i1 (
// port map - connection between master ports and signals/registers   
	.A(A),
	.AM(AM),
	.AR(AR),
	.CLK(CLK),
	.E(E),
	.Fa(Fa),
	.I(I),
	.LoadA(LoadA),
	.Op(Op)
);

// CLK
always
begin
	CLK = 1'b0;
	CLK = #10000 1'b1;
	#10000;
end 
// AR[ 3 ]
initial
begin
	repeat(3)
	begin
		AR[3] = 1'b0;
		AR[3] = #160000 1'b1;
		# 160000;
	end
	AR[3] = 1'b0;
end 
// AR[ 2 ]
initial
begin
	repeat(6)
	begin
		AR[2] = 1'b0;
		AR[2] = #80000 1'b1;
		# 80000;
	end
	AR[2] = 1'b0;
end 
// AR[ 1 ]
initial
begin
	repeat(12)
	begin
		AR[1] = 1'b0;
		AR[1] = #40000 1'b1;
		# 40000;
	end
	AR[1] = 1'b0;
end 
// AR[ 0 ]
always
begin
	AR[0] = 1'b0;
	AR[0] = #20000 1'b1;
	#20000;
end 

// I
initial
begin
	I = 1'b1;
end 
// AM[ 3 ]
initial
begin
	AM[3] = 1'b1;
end 
// AM[ 2 ]
initial
begin
	AM[2] = 1'b0;
end 
// AM[ 1 ]
initial
begin
	AM[1] = 1'b1;
end 
// AM[ 0 ]
initial
begin
	AM[0] = 1'b1;
end 

// LoadA
initial
begin
	LoadA = 1'b0;
	LoadA = #20000 1'b1;
	LoadA = #20000 1'b0;
	LoadA = #570000 1'b1;
	LoadA = #20000 1'b0;
end 
// Op[ 2 ]
initial
begin
	Op[2] = 1'b1;
end 
// Op[ 1 ]
initial
begin
	Op[1] = 1'b0;
	Op[1] = #620000 1'b1;
end 
// Op[ 0 ]
initial
begin
	Op[0] = 1'b0;
	Op[0] = #620000 1'b1;
	Op[0] = #110000 1'b0;
end 
// Fa[ 3 ]
initial
begin
	Fa[3] = 1'b0;
end 
// Fa[ 2 ]
initial
begin
	Fa[2] = 1'b0;
end 
// Fa[ 1 ]
initial
begin
	Fa[1] = 1'b0;
end 
// Fa[ 0 ]
initial
begin
	Fa[0] = 1'b0;
end 

RegistroA_vlg_sample_tst tb_sample (
	.AM(AM),
	.AR(AR),
	.CLK(CLK),
	.Fa(Fa),
	.I(I),
	.LoadA(LoadA),
	.Op(Op),
	.sampler_tx(sampler)
);

RegistroA_vlg_check_tst tb_out(
	.A(A),
	.E(E),
	.sampler_rx(sampler)
);
endmodule

