// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "07/28/2023 17:58:05"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    ALU
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module ALU_vlg_sample_tst(
	AM,
	BM,
	CLK,
	LoadA,
	LoadB,
	OPCODE,
	sampler_tx
);
input [3:0] AM;
input [3:0] BM;
input  CLK;
input  LoadA;
input  LoadB;
input [3:0] OPCODE;
output sampler_tx;

reg sample;
time current_time;
always @(AM or BM or CLK or LoadA or LoadB or OPCODE)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module ALU_vlg_check_tst (
	A,
	B,
	E,
	sampler_rx
);
input [3:0] A;
input [3:0] B;
input [3:0] E;
input sampler_rx;

reg [3:0] A_expected;
reg [3:0] B_expected;
reg [3:0] E_expected;

reg [3:0] A_prev;
reg [3:0] B_prev;
reg [3:0] E_prev;

reg [3:0] A_expected_prev;
reg [3:0] B_expected_prev;
reg [3:0] E_expected_prev;

reg [3:0] last_A_exp;
reg [3:0] last_B_exp;
reg [3:0] last_E_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:3] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 3'b1;
end

// update real /o prevs

always @(trigger)
begin
	A_prev = A;
	B_prev = B;
	E_prev = E;
end

// update expected /o prevs

always @(trigger)
begin
	A_expected_prev = A_expected;
	B_expected_prev = B_expected;
	E_expected_prev = E_expected;
end


// expected A[ 3 ]
initial
begin
	A_expected[3] = 1'bX;
end 
// expected A[ 2 ]
initial
begin
	A_expected[2] = 1'bX;
end 
// expected A[ 1 ]
initial
begin
	A_expected[1] = 1'bX;
end 
// expected A[ 0 ]
initial
begin
	A_expected[0] = 1'bX;
end 
// expected B[ 3 ]
initial
begin
	B_expected[3] = 1'bX;
end 
// expected B[ 2 ]
initial
begin
	B_expected[2] = 1'bX;
end 
// expected B[ 1 ]
initial
begin
	B_expected[1] = 1'bX;
end 
// expected B[ 0 ]
initial
begin
	B_expected[0] = 1'bX;
end 
// expected E[ 3 ]
initial
begin
	E_expected[3] = 1'bX;
end 
// expected E[ 2 ]
initial
begin
	E_expected[2] = 1'bX;
end 
// expected E[ 1 ]
initial
begin
	E_expected[1] = 1'bX;
end 
// expected E[ 0 ]
initial
begin
	E_expected[0] = 1'bX;
end 
// generate trigger
always @(A_expected or A or B_expected or B or E_expected or E)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected A = %b | expected B = %b | expected E = %b | ",A_expected_prev,B_expected_prev,E_expected_prev);
	$display("| real A = %b | real B = %b | real E = %b | ",A_prev,B_prev,E_prev);
`endif
	if (
		( A_expected_prev[0] !== 1'bx ) && ( A_prev[0] !== A_expected_prev[0] )
		&& ((A_expected_prev[0] !== last_A_exp[0]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port A[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", A_expected_prev);
		$display ("     Real value = %b", A_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_A_exp[0] = A_expected_prev[0];
	end
	if (
		( A_expected_prev[1] !== 1'bx ) && ( A_prev[1] !== A_expected_prev[1] )
		&& ((A_expected_prev[1] !== last_A_exp[1]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port A[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", A_expected_prev);
		$display ("     Real value = %b", A_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_A_exp[1] = A_expected_prev[1];
	end
	if (
		( A_expected_prev[2] !== 1'bx ) && ( A_prev[2] !== A_expected_prev[2] )
		&& ((A_expected_prev[2] !== last_A_exp[2]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port A[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", A_expected_prev);
		$display ("     Real value = %b", A_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_A_exp[2] = A_expected_prev[2];
	end
	if (
		( A_expected_prev[3] !== 1'bx ) && ( A_prev[3] !== A_expected_prev[3] )
		&& ((A_expected_prev[3] !== last_A_exp[3]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port A[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", A_expected_prev);
		$display ("     Real value = %b", A_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_A_exp[3] = A_expected_prev[3];
	end
	if (
		( B_expected_prev[0] !== 1'bx ) && ( B_prev[0] !== B_expected_prev[0] )
		&& ((B_expected_prev[0] !== last_B_exp[0]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port B[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", B_expected_prev);
		$display ("     Real value = %b", B_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_B_exp[0] = B_expected_prev[0];
	end
	if (
		( B_expected_prev[1] !== 1'bx ) && ( B_prev[1] !== B_expected_prev[1] )
		&& ((B_expected_prev[1] !== last_B_exp[1]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port B[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", B_expected_prev);
		$display ("     Real value = %b", B_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_B_exp[1] = B_expected_prev[1];
	end
	if (
		( B_expected_prev[2] !== 1'bx ) && ( B_prev[2] !== B_expected_prev[2] )
		&& ((B_expected_prev[2] !== last_B_exp[2]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port B[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", B_expected_prev);
		$display ("     Real value = %b", B_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_B_exp[2] = B_expected_prev[2];
	end
	if (
		( B_expected_prev[3] !== 1'bx ) && ( B_prev[3] !== B_expected_prev[3] )
		&& ((B_expected_prev[3] !== last_B_exp[3]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port B[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", B_expected_prev);
		$display ("     Real value = %b", B_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_B_exp[3] = B_expected_prev[3];
	end
	if (
		( E_expected_prev[0] !== 1'bx ) && ( E_prev[0] !== E_expected_prev[0] )
		&& ((E_expected_prev[0] !== last_E_exp[0]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port E[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", E_expected_prev);
		$display ("     Real value = %b", E_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_E_exp[0] = E_expected_prev[0];
	end
	if (
		( E_expected_prev[1] !== 1'bx ) && ( E_prev[1] !== E_expected_prev[1] )
		&& ((E_expected_prev[1] !== last_E_exp[1]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port E[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", E_expected_prev);
		$display ("     Real value = %b", E_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_E_exp[1] = E_expected_prev[1];
	end
	if (
		( E_expected_prev[2] !== 1'bx ) && ( E_prev[2] !== E_expected_prev[2] )
		&& ((E_expected_prev[2] !== last_E_exp[2]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port E[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", E_expected_prev);
		$display ("     Real value = %b", E_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_E_exp[2] = E_expected_prev[2];
	end
	if (
		( E_expected_prev[3] !== 1'bx ) && ( E_prev[3] !== E_expected_prev[3] )
		&& ((E_expected_prev[3] !== last_E_exp[3]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port E[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", E_expected_prev);
		$display ("     Real value = %b", E_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_E_exp[3] = E_expected_prev[3];
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#200000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module ALU_vlg_vec_tst();
// constants                                           
// general purpose registers
reg [3:0] AM;
reg [3:0] BM;
reg CLK;
reg LoadA;
reg LoadB;
reg [3:0] OPCODE;
// wires                                               
wire [3:0] A;
wire [3:0] B;
wire [3:0] E;

wire sampler;                             

// assign statements (if any)                          
ALU i1 (
// port map - connection between master ports and signals/registers   
	.A(A),
	.AM(AM),
	.B(B),
	.BM(BM),
	.CLK(CLK),
	.E(E),
	.LoadA(LoadA),
	.LoadB(LoadB),
	.OPCODE(OPCODE)
);

// CLK
always
begin
	CLK = 1'b0;
	CLK = #5000 1'b1;
	#5000;
end 
// AM[ 3 ]
initial
begin
	AM[3] = 1'b1;
	AM[3] = #10000 1'b0;
end 
// AM[ 2 ]
initial
begin
	AM[2] = 1'b0;
end 
// AM[ 1 ]
initial
begin
	AM[1] = 1'b1;
	AM[1] = #10000 1'b0;
end 
// AM[ 0 ]
initial
begin
	AM[0] = 1'b0;
end 

// LoadA
initial
begin
	LoadA = 1'b1;
	LoadA = #10000 1'b0;
	LoadA = #10000 1'b1;
	LoadA = #10000 1'b0;
end 
// BM[ 3 ]
initial
begin
	BM[3] = 1'b1;
end 
// BM[ 2 ]
initial
begin
	BM[2] = 1'b0;
end 
// BM[ 1 ]
initial
begin
	BM[1] = 1'b1;
end 
// BM[ 0 ]
initial
begin
	BM[0] = 1'b0;
end 

// LoadB
initial
begin
	LoadB = 1'b1;
	LoadB = #10000 1'b0;
end 
// OPCODE[ 3 ]
initial
begin
	OPCODE[3] = 1'b0;
	OPCODE[3] = #150000 1'b1;
end 
// OPCODE[ 2 ]
initial
begin
	OPCODE[2] = 1'b1;
end 
// OPCODE[ 1 ]
initial
begin
	OPCODE[1] = 1'b1;
	OPCODE[1] = #100000 1'b0;
	OPCODE[1] = #50000 1'b1;
end 
// OPCODE[ 0 ]
initial
begin
	OPCODE[0] = 1'b1;
	OPCODE[0] = #50000 1'b0;
	OPCODE[0] = #50000 1'b1;
end 

ALU_vlg_sample_tst tb_sample (
	.AM(AM),
	.BM(BM),
	.CLK(CLK),
	.LoadA(LoadA),
	.LoadB(LoadB),
	.OPCODE(OPCODE),
	.sampler_tx(sampler)
);

ALU_vlg_check_tst tb_out(
	.A(A),
	.B(B),
	.E(E),
	.sampler_rx(sampler)
);
endmodule

