node n1 {
    type router
    model router
    network-config {
	hostname n1
	!
	interface eth2
	 ip address 140.222.20.65/30
	!
	interface eth1
	 ip address 140.222.20.73/30
	!
	interface eth0
	 ip address 192.168.1.1/24
	!
    }
    canvas c1
    iconcoords {335.0 193.0}
    labelcoords {335.0 225.0}
    interface-peer {eth0 n10}
    interface-peer {eth1 n3}
    interface-peer {eth2 n2}
    services {NAT IPForward StaticRoute}
    custom-config {
	custom-config-id service:NAT
	custom-command NAT
	config {
	files=('nat.sh', )
	}
    }
    custom-config {
	custom-config-id service:NAT:nat.sh
	custom-command nat.sh
	config {
	#!/bin/sh
	# generated by security.py
	# NAT out the first interface by default
	# NAT out the eth0 interface
	# iptables -t nat -A POSTROUTING -o eth0 -j MASQUERADE
	# iptables -A FORWARD -i eth0 -m state --state RELATED,ESTABLISHED -j ACCEPT
	# iptables -A FORWARD -i eth0 -j DROP
	
	#iptables -t nat -A POSTROUTING -o eth1 -j MASQUERADE
	#iptables -A FORWARD -i eth1 -m state --state RELATED,ESTABLISHED -j ACCEPT
	#iptables -A FORWARD -i eth1 -j DROP
	#iptables -t nat -A POSTROUTING -o eth2 -j MASQUERADE
	#iptables -A FORWARD -i eth2 -m state --state RELATED,ESTABLISHED -j ACCEPT
	#iptables -A FORWARD -i eth2 -j DROP
	
	iptables -t nat -A POSTROUTING -o eth1 j MASQUERADE
	iptables -t nat -A POSTROUTING -o eth2 j MASQUERADE
	
	}
    }
    custom-config {
	custom-config-id service:StaticRoute
	custom-command StaticRoute
	config {
	files=('staticroute.sh', )
	}
    }
    custom-config {
	custom-config-id service:StaticRoute:staticroute.sh
	custom-command staticroute.sh
	config {
	#!/bin/sh
	# auto-generated by StaticRoute service (utility.py)
	#
	# NOTE: this service must be customized to be of any use
	#       Below are samples that you can uncomment and edit.
	#
	#/sbin/ip route add 10.9.8.0/24 via 192.168.1.1
	#/sbin/ip route add 10.9.8.0/24 via 140.222.20.73
	#/sbin/ip route add 10.9.8.0/24 via 140.222.20.65
	
	ip route add 140.222.20.96/28 via 140.222.20.66
	ip route add 140.222.20.0/26 via 140.222.20.66
	ip route add 140.222.16.0/23 via 140.222.20.66
	ip route add default via 140.222.20.74
	}
    }
}

node n2 {
    type router
    model router
    network-config {
	hostname n2
	!
	interface eth3
	 ipv6 address 2001:fef8:df80:1::1/64
	 ip address 140.222.20.101/30
	!
	interface eth2
	 ip address 140.222.20.69/30
	!
	interface eth1
	 ip address 140.222.20.97/30
	!
	interface eth0
	 ip address 140.222.20.66/30
	!
    }
    canvas c1
    iconcoords {596.0 191.0}
    labelcoords {596.0 223.0}
    interface-peer {eth0 n1}
    interface-peer {eth1 n4}
    interface-peer {eth2 n3}
    interface-peer {eth3 n7}
    services {IPForward StaticRoute}
    custom-config {
	custom-config-id service:StaticRoute
	custom-command StaticRoute
	config {
	files=('staticroute.sh', )
	}
    }
    custom-config {
	custom-config-id service:StaticRoute:staticroute.sh
	custom-command staticroute.sh
	config {
	#!/bin/sh
	# auto-generated by StaticRoute service (utility.py)
	#
	# NOTE: this service must be customized to be of any use
	#       Below are samples that you can uncomment and edit.
	#
	#/sbin/ip route add 10.9.8.0/24 via 140.222.20.65
	#/sbin/ip route add 10.9.8.0/24 via 140.222.20.97
	#/sbin/ip route add 10.9.8.0/24 via 140.222.20.69
	#/sbin/ip route add 10.9.8.0/24 via 140.222.20.101
	#/sbin/ip route add 3ffe:4::/64 via 2001:fef8:df80:1::1
	
	ip route add 192.168.1.0/24 via 140.222.20.65
	ip route add 140.222.16.0/23 via 140.222.20.102
	ip route add 140.222.20.104/30 via 140.222.20.102
	ip route add 140.222.20.0/26 via 140.222.20.102
	ip route add 140.222.20.92/30 via 140.222.20.98
	ip route add default via 140.222.20.70
	}
    }
}

node n3 {
    type router
    model router
    network-config {
	hostname n3
	!
	interface eth4
	 ip address 140.222.20.70/30
	!
	interface eth3
	 ip address 140.222.20.89/30
	!
	interface eth2
	 ip address 140.222.20.74/30
	!
	interface eth1
	 ip address 140.222.20.77/30
	!
	interface eth0
	 ip address 140.222.20.85/30
	!
    }
    canvas c1
    iconcoords {337.0 319.0}
    labelcoords {337.0 351.0}
    interface-peer {eth0 n6}
    interface-peer {eth1 n5}
    interface-peer {eth2 n1}
    interface-peer {eth3 n15}
    interface-peer {eth4 n2}
    services {IPForward StaticRoute}
    custom-config {
	custom-config-id service:StaticRoute
	custom-command StaticRoute
	config {
	files=('staticroute.sh', )
	}
    }
    custom-config {
	custom-config-id service:StaticRoute:staticroute.sh
	custom-command staticroute.sh
	config {
	#!/bin/sh
	# auto-generated by StaticRoute service (utility.py)
	#
	# NOTE: this service must be customized to be of any use
	#       Below are samples that you can uncomment and edit.
	#
	#/sbin/ip route add 10.9.8.0/24 via 140.222.20.85
	#/sbin/ip route add 10.9.8.0/24 via 140.222.20.77
	#/sbin/ip route add 10.9.8.0/24 via 140.222.20.73
	#/sbin/ip route add 10.9.8.0/24 via 140.222.20.89
	#/sbin/ip route add 10.9.8.0/24 via 140.222.20.69
	
	ip route add 140.222.20.80/30 via 140.222.20.78
	ip route add 140.222.18.0/23 via 140.222.20.78
	ip route add 192.168.1.0/24 via 140.222.20.73
	ip route add 140.222.20.92/30 via 140.222.20.90
	ip route add default via 140.222.20.69
	}
    }
}

node n4 {
    type router
    model router
    network-config {
	hostname n4
	!
	interface eth1
	 ip address 140.222.20.98/30
	!
	interface eth0
	 ip address 140.222.20.93/30
	!
    }
    canvas c1
    iconcoords {554.0 328.0}
    labelcoords {554.0 360.0}
    interface-peer {eth0 n15}
    interface-peer {eth1 n2}
    services {IPForward StaticRoute}
    custom-config {
	custom-config-id service:StaticRoute
	custom-command StaticRoute
	config {
	files=('staticroute.sh', )
	}
    }
    custom-config {
	custom-config-id service:StaticRoute:staticroute.sh
	custom-command staticroute.sh
	config {
	#!/bin/sh
	# auto-generated by StaticRoute service (utility.py)
	#
	# NOTE: this service must be customized to be of any use
	#       Below are samples that you can uncomment and edit.
	#
	#/sbin/ip route add 10.9.8.0/24 via 140.222.20.93
	#/sbin/ip route add 10.9.8.0/24 via 140.222.20.97
	
	ip route add 140.222.20.88/30 via 140.222.20.94
	ip route add default via 140.222.20.97
	}
    }
}

node n5 {
    type router
    model router
    network-config {
	hostname n5
	!
	interface eth2
	 ip address 140.222.20.78/30
	!
	interface eth1
	 ip address 140.222.20.81/30
	!
	interface eth0
	 ipv6 address 2001:fef8:df80:0::1/64
	 ip address 140.222.18.1/23
	!
    }
    canvas c1
    iconcoords {71.0 367.0}
    labelcoords {71.0 399.0}
    interface-peer {eth0 n12}
    interface-peer {eth1 n6}
    interface-peer {eth2 n3}
    services {IPForward StaticRoute}
    custom-config {
	custom-config-id service:StaticRoute
	custom-command StaticRoute
	config {
	files=('staticroute.sh', )
	}
    }
    custom-config {
	custom-config-id service:StaticRoute:staticroute.sh
	custom-command staticroute.sh
	config {
	#!/bin/sh
	# auto-generated by StaticRoute service (utility.py)
	#
	# NOTE: this service must be customized to be of any use
	#       Below are samples that you can uncomment and edit.
	#
	#/sbin/ip route add 10.9.8.0/24 via 140.222.18.1
	#/sbin/ip route add 3ffe:4::/64 via 2001:fef8:df80::1
	#/sbin/ip route add 10.9.8.0/24 via 140.222.20.81
	#/sbin/ip route add 10.9.8.0/24 via 140.222.20.77
	
	ip route add default via 140.222.20.77
	}
    }
}

node n6 {
    type router
    model router
    network-config {
	hostname n6
	!
	interface eth1
	 ip address 140.222.20.86/30
	!
	interface eth0
	 ip address 140.222.20.82/30
	!
    }
    canvas c1
    iconcoords {267.0 582.0}
    labelcoords {267.0 614.0}
    interface-peer {eth0 n5}
    interface-peer {eth1 n3}
    services {IPForward StaticRoute}
    custom-config {
	custom-config-id service:StaticRoute
	custom-command StaticRoute
	config {
	files=('staticroute.sh', )
	}
    }
    custom-config {
	custom-config-id service:StaticRoute:staticroute.sh
	custom-command staticroute.sh
	config {
	#!/bin/sh
	# auto-generated by StaticRoute service (utility.py)
	#
	# NOTE: this service must be customized to be of any use
	#       Below are samples that you can uncomment and edit.
	#
	#/sbin/ip route add 10.9.8.0/24 via 140.222.20.81
	#/sbin/ip route add 10.9.8.0/24 via 140.222.20.85
	
	ip route add 140.222.18.0/23 via 140.222.20.81
	ip route add default via 140.222.20.85
	}
    }
}

node n7 {
    type router
    model router
    network-config {
	hostname n7
	!
	interface eth1
	 ipv6 address 2001:fef8:df80:2::1/64
	 ip address 140.222.20.105/30
	!
	interface eth0
	 ipv6 address 2001:fef8:df80:1::2/64
	 ip address 140.222.20.102/30
	!
    }
    canvas c1
    iconcoords {728.0 214.0}
    labelcoords {728.0 246.0}
    interface-peer {eth0 n2}
    interface-peer {eth1 n8}
    services {IPForward StaticRoute}
    custom-config {
	custom-config-id service:StaticRoute
	custom-command StaticRoute
	config {
	files=('staticroute.sh', )
	}
    }
    custom-config {
	custom-config-id service:StaticRoute:staticroute.sh
	custom-command staticroute.sh
	config {
	#!/bin/sh
	# auto-generated by StaticRoute service (utility.py)
	#
	# NOTE: this service must be customized to be of any use
	#       Below are samples that you can uncomment and edit.
	#
	#/sbin/ip route add 10.9.8.0/24 via 140.222.20.101
	#/sbin/ip route add 3ffe:4::/64 via 2001:fef8:df80:1::1
	#/sbin/ip route add 10.9.8.0/24 via 140.222.20.105
	#/sbin/ip route add 3ffe:4::/64 via 2001:fef8:df80:2::1
	
	ip route add 140.222.20.0/26 via 140.222.20.106
	ip route add 140.222.16.0/23 via 140.222.20.106		
	ip route add default via 140.222.20.101	
	}
    }
}

node n8 {
    type router
    model router
    network-config {
	hostname n8
	!
	interface eth1
	 ipv6 address 2001:fef8:df80:3::1/64
	 ip address 140.222.20.1/26
	!
	interface eth0
	 ipv6 address 2001:fef8:df80:2::2/64
	 ip address 140.222.20.106/30
	!
	interface eth2
	 ip address 140.222.16.1/23
	 ipv6 address 2001:fef8:df80:4::1/64
	!
    }
    canvas c1
    iconcoords {643.0 369.0}
    labelcoords {643.0 401.0}
    interface-peer {eth0 n7}
    interface-peer {eth1 n9}
    interface-peer {eth2 n14}
    services {IPForward StaticRoute}
    custom-config {
	custom-config-id service:StaticRoute
	custom-command StaticRoute
	config {
	files=('staticroute.sh', )
	}
    }
    custom-config {
	custom-config-id service:StaticRoute:staticroute.sh
	custom-command staticroute.sh
	config {
	#!/bin/sh
	# auto-generated by StaticRoute service (utility.py)
	#
	# NOTE: this service must be customized to be of any use
	#       Below are samples that you can uncomment and edit.
	#
	#/sbin/ip route add 10.9.8.0/24 via 140.222.20.105
	#/sbin/ip route add 3ffe:4::/64 via 2001:fef8:df80:2::1
	#/sbin/ip route add 10.9.8.0/24 via 140.222.20.1
	#/sbin/ip route add 3ffe:4::/64 via 2001:fef8:df80:3::1
	#/sbin/ip route add 10.9.8.0/24 via 140.222.16.1
	#/sbin/ip route add 3ffe:4::/64 via 2001:fef8:df80:4::1
	
	ip route add default via 140.222.20.105
	}
    }
}

node n9 {
    type router
    model host
    network-config {
	hostname n9
	!
	interface eth0
	 ipv6 address 2001:fef8:df80:3::2/64
	 ip address 140.222.20.2/26
	!
    }
    canvas c1
    iconcoords {867.0 418.0}
    labelcoords {867.0 450.0}
    interface-peer {eth0 n8}
}

node n10 {
    type router
    model host
    network-config {
	hostname n10
	!
	interface eth0
	 ip address 192.168.1.2/24
	!
    }
    canvas c1
    iconcoords {339.0 68.0}
    labelcoords {339.0 100.0}
    interface-peer {eth0 n1}
}

node n11 {
    type router
    model host
    network-config {
	hostname n11
	!
	interface eth0
	 ipv6 address 2001:fef8:df80:0::2/64
	 ip address 140.222.18.2/23
	!
    }
    canvas c1
    iconcoords {232.0 85.0}
    labelcoords {232.0 117.0}
    interface-peer {eth0 n12}
}

node n12 {
    type lanswitch
    network-config {
	hostname n12
	!
    }
    canvas c1
    iconcoords {88.0 216.0}
    labelcoords {88.0 240.0}
    interface-peer {e0 n13}
    interface-peer {e1 n11}
    interface-peer {e2 n5}
}

node n13 {
    type router
    model host
    network-config {
	hostname n13
	!
	interface eth0
	 ipv6 address 2001:fef8:df80:0::3/64
	 ip address 140.222.18.3/23
	!
    }
    canvas c1
    iconcoords {31.0 102.0}
    labelcoords {31.0 134.0}
    interface-peer {eth0 n12}
}

node n14 {
    type router
    model host
    network-config {
	hostname n14
	!
	interface eth0
	 ipv6 address 2001:fef8:df80:4::2/64
	 ip address 140.222.16.2/23
	!
    }
    canvas c1
    iconcoords {694.0 517.0}
    labelcoords {694.0 549.0}
    interface-peer {eth0 n8}
}

node n15 {
    type router
    model router
    network-config {
	hostname n15
	!
	interface eth1
	 ip address 140.222.20.94/30
	!
	interface eth0
	 ip address 140.222.20.90/30
	!
    }
    canvas c1
    iconcoords {532.0 458.0}
    labelcoords {532.0 490.0}
    interface-peer {eth0 n3}
    interface-peer {eth1 n4}
    services {IPForward StaticRoute}
    custom-config {
	custom-config-id service:StaticRoute
	custom-command StaticRoute
	config {
	files=('staticroute.sh', )
	}
    }
    custom-config {
	custom-config-id service:StaticRoute:staticroute.sh
	custom-command staticroute.sh
	config {
	#!/bin/sh
	# auto-generated by StaticRoute service (utility.py)
	#
	# NOTE: this service must be customized to be of any use
	#       Below are samples that you can uncomment and edit.
	#
	#/sbin/ip route add 10.9.8.0/24 via 140.222.20.89
	#/sbin/ip route add 10.9.8.0/24 via 140.222.20.93
	
	ip route add 140.222.20.96/30 via 140.222.20.93
	ip route add default via 140.222.20.89
	}
    }
}

link l1 {
    nodes {n13 n12}
    bandwidth 0
}

link l2 {
    nodes {n12 n11}
    bandwidth 0
}

link l3 {
    nodes {n12 n5}
    bandwidth 0
}

link l4 {
    nodes {n5 n6}
    bandwidth 0
}

link l5 {
    nodes {n6 n3}
    bandwidth 0
}

link l6 {
    nodes {n5 n3}
    bandwidth 0
}

link l7 {
    nodes {n10 n1}
    bandwidth 0
}

link l8 {
    nodes {n1 n3}
    bandwidth 0
}

link l9 {
    nodes {n1 n2}
    bandwidth 0
}

link l10 {
    nodes {n15 n3}
    bandwidth 0
}

link l11 {
    nodes {n15 n4}
    bandwidth 0
}

link l12 {
    nodes {n4 n2}
    bandwidth 0
}

link l13 {
    nodes {n2 n3}
    bandwidth 0
}

link l14 {
    nodes {n2 n7}
    bandwidth 0
}

link l15 {
    nodes {n7 n8}
    bandwidth 0
}

link l16 {
    nodes {n8 n9}
    bandwidth 0
}

link l17 {
    nodes {n8 n14}
    bandwidth 0
}

canvas c1 {
    name {Canvas1}
}

option global {
    interface_names yes
    ip_addresses yes
    ipv6_addresses no
    node_labels yes
    link_labels no
    show_api no
    background_images no
    annotations no
    grid yes
    traffic_start 0
}

option session {
}

