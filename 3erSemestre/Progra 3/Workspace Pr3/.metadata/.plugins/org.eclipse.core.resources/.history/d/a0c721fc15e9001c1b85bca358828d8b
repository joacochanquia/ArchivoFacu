package prog3.grafos.utiles;

import prog3.grafos.Arista;
import prog3.grafos.Grafo;
import prog3.grafos.Vertice;
import prog3.grafos.ejercicios.Peso;
import prog3.listagenerica.ListaGenerica;

public class Delta {

	/*
	 * maxIslasDistintas(Grafo<String> grafo) : int // Retorna el número máximo de
	 * islas distintas que se pueden recorrer en el grafo comprando un único boleto.
	 */

	public int maxIslasDistintas(Grafo<String> grafo) {
		boolean[] marca = new boolean[grafo.listaDeVertices().tamanio()];
		Peso max = new Peso();
		max.maximo();
		int islas = 0;
		boolean llegue = false;
		int i = 0;
		ListaGenerica<Vertice<String>> vert = grafo.listaDeVertices();
		vert.comenzar();
		while (!vert.fin() && !llegue) {
			Vertice<String> dest = vert.proximo();
			if (dest.dato().equals("Muelle Principal")) {
				i = dest.posicion();
				llegue = true;
			}
		}
		this.distanciaMax(i, grafo, max, islas, marca, i);
		return max.getPeso();
	}

	private void distanciaMax(int i, Grafo<String> grafo, Peso max, int islas, boolean[] marca, int prin) {
		marca[i] = true;
		Vertice<String> v = grafo.listaDeVertices().elemento(i);
		ListaGenerica<Arista<String>> ady = grafo.listaDeAdyacentes(v);
		ady.comenzar();
		while (!ady.fin()) {
			int j = ady.proximo().verticeDestino().posicion();
			if (!marca[j]) {
				this.distanciaMax(j, grafo, max, islas + 1, marca, prin);
			} else {
				if (j == prin) {
					if (islas > max.getPeso()) {
						max.setPeso(islas);
					}
				}
			}
		}
		marca[i] = false;
	}

	/*
	 * caminoMasCorto(Grafo<String> grafo, String islaO, String islaD) : RutaMinima
	 * // Retorna un objeto de la clase RutaMinima, el cual contiene el camino más
	 * corto entre islaO e islaD y si se puede realizar con un único boleto o es
	 * necesario comprar un nuevo boleto para completar el recorrido.
	 */
	
	
	
}
