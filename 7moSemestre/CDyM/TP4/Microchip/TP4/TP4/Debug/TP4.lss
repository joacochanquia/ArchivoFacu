
TP4.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000080  00800100  0000033c  000003d0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000033c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000004  00800180  00800180  00000450  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000450  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000480  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000110  00000000  00000000  000004c0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000e48  00000000  00000000  000005d0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000008f7  00000000  00000000  00001418  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000007ef  00000000  00000000  00001d0f  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000264  00000000  00000000  00002500  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000056e  00000000  00000000  00002764  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000492  00000000  00000000  00002cd2  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000d0  00000000  00000000  00003164  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 f9 00 	jmp	0x1f2	; 0x1f2 <__vector_14>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 7d 00 	jmp	0xfa	; 0xfa <__vector_18>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	ec e3       	ldi	r30, 0x3C	; 60
  7c:	f3 e0       	ldi	r31, 0x03	; 3
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a0 38       	cpi	r26, 0x80	; 128
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	a0 e8       	ldi	r26, 0x80	; 128
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a4 38       	cpi	r26, 0x84	; 132
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 53 00 	call	0xa6	; 0xa6 <main>
  9e:	0c 94 9c 01 	jmp	0x338	; 0x338 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <main>:
int main(void)
{
	uint8_t cant = 0;
	RGB color;
	
	PWM_Init();
  a6:	0e 94 17 01 	call	0x22e	; 0x22e <PWM_Init>
	ADC_Init();
  aa:	0e 94 d7 00 	call	0x1ae	; 0x1ae <ADC_Init>
	SerialPort_Init(BR9600); 		// Inicializo formato 8N1 y BAUDRATE = 9600bps
  ae:	87 e6       	ldi	r24, 0x67	; 103
  b0:	0e 94 5c 01 	call	0x2b8	; 0x2b8 <SerialPort_Init>
	SerialPort_TX_Enable();			// Activo el Transmisor del Puerto Serie
  b4:	0e 94 66 01 	call	0x2cc	; 0x2cc <SerialPort_TX_Enable>
	SerialPort_RX_Enable();			// Activo el Receptor del Puerto Serie
  b8:	0e 94 6c 01 	call	0x2d8	; 0x2d8 <SerialPort_RX_Enable>
	SerialPort_Send_String(msg1);   // Envío el mensaje de Bienvenida
  bc:	82 e6       	ldi	r24, 0x62	; 98
  be:	91 e0       	ldi	r25, 0x01	; 1
  c0:	0e 94 80 01 	call	0x300	; 0x300 <SerialPort_Send_String>
	SerialPort_RX_Interrupt_Enable();	// Activo Interrupción de recepcion.
  c4:	0e 94 72 01 	call	0x2e4	; 0x2e4 <SerialPort_RX_Interrupt_Enable>
	sei();
  c8:	78 94       	sei
	color.R = 0;
	color.G = 0;
	color.B = 0;
    while (1) 
    {
		if (active){
  ca:	80 91 80 01 	lds	r24, 0x0180	; 0x800180 <__data_end>
  ce:	88 23       	and	r24, r24
  d0:	e1 f3       	breq	.-8      	; 0xca <main+0x24>
			cant = getCant();
  d2:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <getCant>
			switch (CAct){
  d6:	90 91 83 01 	lds	r25, 0x0183	; 0x800183 <CAct>
  da:	97 34       	cpi	r25, 0x47	; 71
  dc:	41 f0       	breq	.+16     	; 0xee <main+0x48>
  de:	92 35       	cpi	r25, 0x52	; 82
  e0:	19 f0       	breq	.+6      	; 0xe8 <main+0x42>
  e2:	92 34       	cpi	r25, 0x42	; 66
  e4:	91 f7       	brne	.-28     	; 0xca <main+0x24>
  e6:	06 c0       	rjmp	.+12     	; 0xf4 <main+0x4e>
				case 'R':
					SetCT_Red(cant);
  e8:	0e 94 4d 01 	call	0x29a	; 0x29a <SetCT_Red>
				break;
  ec:	ee cf       	rjmp	.-36     	; 0xca <main+0x24>
				case 'G':
					SetCT_Green(cant);
  ee:	0e 94 50 01 	call	0x2a0	; 0x2a0 <SetCT_Green>
				break;
  f2:	eb cf       	rjmp	.-42     	; 0xca <main+0x24>
				case 'B':
					SetCT_Blue(cant);
  f4:	0e 94 56 01 	call	0x2ac	; 0x2ac <SetCT_Blue>
				break;
  f8:	e8 cf       	rjmp	.-48     	; 0xca <main+0x24>

000000fa <__vector_18>:
		}
    }
}

// Rutina de Servicio de Interrupción de Byte Recibido
ISR(USART_RX_vect){
  fa:	1f 92       	push	r1
  fc:	0f 92       	push	r0
  fe:	0f b6       	in	r0, 0x3f	; 63
 100:	0f 92       	push	r0
 102:	11 24       	eor	r1, r1
 104:	2f 93       	push	r18
 106:	3f 93       	push	r19
 108:	4f 93       	push	r20
 10a:	5f 93       	push	r21
 10c:	6f 93       	push	r22
 10e:	7f 93       	push	r23
 110:	8f 93       	push	r24
 112:	9f 93       	push	r25
 114:	af 93       	push	r26
 116:	bf 93       	push	r27
 118:	cf 93       	push	r28
 11a:	ef 93       	push	r30
 11c:	ff 93       	push	r31
	char RX_Buffer = UDR0; //la lectura del UDR borra flag RXC
 11e:	c0 91 c6 00 	lds	r28, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
	// Si se presiona 'f' se alterna la transmision de datos
	if((RX_Buffer == 'f')||(RX_Buffer == 'F')){ // Si se presiono una F
 122:	c6 36       	cpi	r28, 0x66	; 102
 124:	11 f0       	breq	.+4      	; 0x12a <__vector_18+0x30>
 126:	c6 34       	cpi	r28, 0x46	; 70
 128:	31 f4       	brne	.+12     	; 0x136 <__vector_18+0x3c>
		active = 0; // Se finaliza la modificacion
 12a:	10 92 80 01 	sts	0x0180, r1	; 0x800180 <__data_end>
		SerialPort_Send_String(msgF);   // Envío el mensaje de Bienvenida
 12e:	80 e0       	ldi	r24, 0x00	; 0
 130:	91 e0       	ldi	r25, 0x01	; 1
 132:	0e 94 80 01 	call	0x300	; 0x300 <SerialPort_Send_String>
	}
	// Si se presiona 'R' se alterna la transmision de datos
	if((RX_Buffer == 'r')||(RX_Buffer == 'R')){ // Si se presiono una R y no se esta modificando otro color
 136:	c2 37       	cpi	r28, 0x72	; 114
 138:	11 f0       	breq	.+4      	; 0x13e <__vector_18+0x44>
 13a:	c2 35       	cpi	r28, 0x52	; 82
 13c:	51 f4       	brne	.+20     	; 0x152 <__vector_18+0x58>
		active = 1; // Se activa la modificacion de color
 13e:	81 e0       	ldi	r24, 0x01	; 1
 140:	80 93 80 01 	sts	0x0180, r24	; 0x800180 <__data_end>
		CAct = 'R';
 144:	82 e5       	ldi	r24, 0x52	; 82
 146:	80 93 83 01 	sts	0x0183, r24	; 0x800183 <CAct>
		SerialPort_Send_String(msgR);   // Envío el mensaje de Bienvenida
 14a:	89 e4       	ldi	r24, 0x49	; 73
 14c:	91 e0       	ldi	r25, 0x01	; 1
 14e:	0e 94 80 01 	call	0x300	; 0x300 <SerialPort_Send_String>
	}
	// Si se presiona 'G' se alterna la transmision de datos
	if((RX_Buffer == 'g')||(RX_Buffer == 'G')){ // Si se presiono una G
 152:	c7 36       	cpi	r28, 0x67	; 103
 154:	11 f0       	breq	.+4      	; 0x15a <__vector_18+0x60>
 156:	c7 34       	cpi	r28, 0x47	; 71
 158:	51 f4       	brne	.+20     	; 0x16e <__vector_18+0x74>
		active = 1; // Se activa la modificacion de color
 15a:	81 e0       	ldi	r24, 0x01	; 1
 15c:	80 93 80 01 	sts	0x0180, r24	; 0x800180 <__data_end>
		CAct = 'G';
 160:	87 e4       	ldi	r24, 0x47	; 71
 162:	80 93 83 01 	sts	0x0183, r24	; 0x800183 <CAct>
		SerialPort_Send_String(msgG);   // Envío el mensaje de Bienvenida
 166:	8f e2       	ldi	r24, 0x2F	; 47
 168:	91 e0       	ldi	r25, 0x01	; 1
 16a:	0e 94 80 01 	call	0x300	; 0x300 <SerialPort_Send_String>
	}
	// Si se presiona 'B' se alterna la transmision de datos
	if((RX_Buffer == 'b')||(RX_Buffer == 'B')){ // Si se presiono una B
 16e:	c2 36       	cpi	r28, 0x62	; 98
 170:	11 f0       	breq	.+4      	; 0x176 <__vector_18+0x7c>
 172:	c2 34       	cpi	r28, 0x42	; 66
 174:	51 f4       	brne	.+20     	; 0x18a <__vector_18+0x90>
		active = 1; // Se activa la modificacion de color
 176:	81 e0       	ldi	r24, 0x01	; 1
 178:	80 93 80 01 	sts	0x0180, r24	; 0x800180 <__data_end>
		CAct = 'B';
 17c:	82 e4       	ldi	r24, 0x42	; 66
 17e:	80 93 83 01 	sts	0x0183, r24	; 0x800183 <CAct>
		SerialPort_Send_String(msgB);   // Envío el mensaje de Bienvenida
 182:	86 e1       	ldi	r24, 0x16	; 22
 184:	91 e0       	ldi	r25, 0x01	; 1
 186:	0e 94 80 01 	call	0x300	; 0x300 <SerialPort_Send_String>
	}
	RX_Buffer=0;
}
 18a:	ff 91       	pop	r31
 18c:	ef 91       	pop	r30
 18e:	cf 91       	pop	r28
 190:	bf 91       	pop	r27
 192:	af 91       	pop	r26
 194:	9f 91       	pop	r25
 196:	8f 91       	pop	r24
 198:	7f 91       	pop	r23
 19a:	6f 91       	pop	r22
 19c:	5f 91       	pop	r21
 19e:	4f 91       	pop	r20
 1a0:	3f 91       	pop	r19
 1a2:	2f 91       	pop	r18
 1a4:	0f 90       	pop	r0
 1a6:	0f be       	out	0x3f, r0	; 63
 1a8:	0f 90       	pop	r0
 1aa:	1f 90       	pop	r1
 1ac:	18 95       	reti

000001ae <ADC_Init>:
#include <avr/io.h>
#include <avr/interrupt.h> // Librer?a para el manejo de interrupciones en AVR
#include "pot.h"

void ADC_Init(){
	ADCSRA |= (1<<ADEN);
 1ae:	ea e7       	ldi	r30, 0x7A	; 122
 1b0:	f0 e0       	ldi	r31, 0x00	; 0
 1b2:	80 81       	ld	r24, Z
 1b4:	80 68       	ori	r24, 0x80	; 128
 1b6:	80 83       	st	Z, r24
	ADCSRA |= (1<<ADPS2)|(1<<ADPS1)|(1<<ADPS0);
 1b8:	80 81       	ld	r24, Z
 1ba:	87 60       	ori	r24, 0x07	; 7
 1bc:	80 83       	st	Z, r24
	//DIDR0= 0x01;
	ADMUX |= (1<<ADLAR)|(1<<REFS0); //left justified , AVCC as Vref
 1be:	ec e7       	ldi	r30, 0x7C	; 124
 1c0:	f0 e0       	ldi	r31, 0x00	; 0
 1c2:	80 81       	ld	r24, Z
 1c4:	80 66       	ori	r24, 0x60	; 96
 1c6:	80 83       	st	Z, r24
	ADMUX |= (1<<MUX1)|(1<<MUX0);
 1c8:	80 81       	ld	r24, Z
 1ca:	83 60       	ori	r24, 0x03	; 3
 1cc:	80 83       	st	Z, r24
 1ce:	08 95       	ret

000001d0 <getCant>:
}

uint8_t getCant(){
	ADCSRA |= (1<<ADSC);
 1d0:	ea e7       	ldi	r30, 0x7A	; 122
 1d2:	f0 e0       	ldi	r31, 0x00	; 0
 1d4:	80 81       	ld	r24, Z
 1d6:	80 64       	ori	r24, 0x40	; 64
 1d8:	80 83       	st	Z, r24
	
	while ((ADCSRA & (1<<ADIF))==0);
 1da:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
 1de:	84 ff       	sbrs	r24, 4
 1e0:	fc cf       	rjmp	.-8      	; 0x1da <getCant+0xa>
	ADCSRA |= (1<<ADIF);
 1e2:	ea e7       	ldi	r30, 0x7A	; 122
 1e4:	f0 e0       	ldi	r31, 0x00	; 0
 1e6:	80 81       	ld	r24, Z
 1e8:	80 61       	ori	r24, 0x10	; 16
 1ea:	80 83       	st	Z, r24
// 	SerialPort_Send_String("\r\n");
// 	SerialPort_Send_uint8_t(ADCL);
// 	SerialPort_Send_String("\r\n");
// 	SerialPort_Send_String("\r\n");
	
	return ADCH; //resultado de 8 bits justificado a izq.
 1ec:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
 1f0:	08 95       	ret

000001f2 <__vector_14>:
#include "PWM.h"

static uint8_t DELTA;
static uint8_t cuenta;

ISR(TIMER0_COMPA_vect) { // Rutina de servicio a interrupcion
 1f2:	1f 92       	push	r1
 1f4:	0f 92       	push	r0
 1f6:	0f b6       	in	r0, 0x3f	; 63
 1f8:	0f 92       	push	r0
 1fa:	11 24       	eor	r1, r1
 1fc:	8f 93       	push	r24
 1fe:	9f 93       	push	r25
	cuenta++;
 200:	80 91 81 01 	lds	r24, 0x0181	; 0x800181 <cuenta>
 204:	8f 5f       	subi	r24, 0xFF	; 255
 206:	80 93 81 01 	sts	0x0181, r24	; 0x800181 <cuenta>
	if (cuenta < DELTA){
 20a:	90 91 82 01 	lds	r25, 0x0182	; 0x800182 <DELTA>
 20e:	89 17       	cp	r24, r25
 210:	20 f4       	brcc	.+8      	; 0x21a <__vector_14+0x28>
		PORTB &= ~(1<<PORTB5); // Se pone el pin en 0 para prender el led
 212:	85 b1       	in	r24, 0x05	; 5
 214:	8f 7d       	andi	r24, 0xDF	; 223
 216:	85 b9       	out	0x05, r24	; 5
 218:	03 c0       	rjmp	.+6      	; 0x220 <__vector_14+0x2e>
	}else{
		PORTB |= (1<<PORTB5); // Se pone el pin en 1 para apagar el led
 21a:	85 b1       	in	r24, 0x05	; 5
 21c:	80 62       	ori	r24, 0x20	; 32
 21e:	85 b9       	out	0x05, r24	; 5
	}
}
 220:	9f 91       	pop	r25
 222:	8f 91       	pop	r24
 224:	0f 90       	pop	r0
 226:	0f be       	out	0x3f, r0	; 63
 228:	0f 90       	pop	r0
 22a:	1f 90       	pop	r1
 22c:	18 95       	reti

0000022e <PWM_Init>:

// Inicializacion del PWM por software
void PWM_Init(){
	
	DDRB |= (1<<PORTB1)|(1<<PORTB2)|(1<<PORTB5);
 22e:	84 b1       	in	r24, 0x04	; 4
 230:	86 62       	ori	r24, 0x26	; 38
 232:	84 b9       	out	0x04, r24	; 4
	
	// Modo PWM 
	// Luz Azul
	TCCR1A |= (1<<COM1A1)|(1<<COM1A0)|(1<<COM1B1)|(1<<COM1B0)|(1<<WGM10);
 234:	e0 e8       	ldi	r30, 0x80	; 128
 236:	f0 e0       	ldi	r31, 0x00	; 0
 238:	80 81       	ld	r24, Z
 23a:	81 6f       	ori	r24, 0xF1	; 241
 23c:	80 83       	st	Z, r24
	TCCR1A &= ~(1<<WGM11);
 23e:	80 81       	ld	r24, Z
 240:	8d 7f       	andi	r24, 0xFD	; 253
 242:	80 83       	st	Z, r24
	// Luz Verde
	TCCR1B |= (1<<CS10)|(1<<WGM12);
 244:	e1 e8       	ldi	r30, 0x81	; 129
 246:	f0 e0       	ldi	r31, 0x00	; 0
 248:	80 81       	ld	r24, Z
 24a:	89 60       	ori	r24, 0x09	; 9
 24c:	80 83       	st	Z, r24
	TCCR1B &= ~(1<<WGM13);
 24e:	80 81       	ld	r24, Z
 250:	8f 7e       	andi	r24, 0xEF	; 239
 252:	80 83       	st	Z, r24
	// Setteo de los valores iniciales de los comparadores
	OCR1A = 0; //BLUE LED
 254:	10 92 89 00 	sts	0x0089, r1	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
 258:	10 92 88 00 	sts	0x0088, r1	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
	OCR1B = 0; //GREEN LED
 25c:	10 92 8b 00 	sts	0x008B, r1	; 0x80008b <__TEXT_REGION_LENGTH__+0x7f808b>
 260:	10 92 8a 00 	sts	0x008A, r1	; 0x80008a <__TEXT_REGION_LENGTH__+0x7f808a>
	
	// Luz Roja
	// Modo CTC TOP: OCRA
	TCCR0A |= (1<<WGM01);
 264:	84 b5       	in	r24, 0x24	; 36
 266:	82 60       	ori	r24, 0x02	; 2
 268:	84 bd       	out	0x24, r24	; 36
	TCCR0A &= ~(1<<WGM00);
 26a:	84 b5       	in	r24, 0x24	; 36
 26c:	8e 7f       	andi	r24, 0xFE	; 254
 26e:	84 bd       	out	0x24, r24	; 36
	TCCR0B &= ~(1<<WGM02);
 270:	85 b5       	in	r24, 0x25	; 37
 272:	87 7f       	andi	r24, 0xF7	; 247
 274:	85 bd       	out	0x25, r24	; 37
	// Prescaler clk/64
	TCCR0B |= (1<<CS01)|(1<<CS00);
 276:	85 b5       	in	r24, 0x25	; 37
 278:	83 60       	ori	r24, 0x03	; 3
 27a:	85 bd       	out	0x25, r24	; 37
	TCCR0B &= ~(1<<CS02);
 27c:	85 b5       	in	r24, 0x25	; 37
 27e:	8b 7f       	andi	r24, 0xFB	; 251
 280:	85 bd       	out	0x25, r24	; 37
	// Comparador en el valor para la cuenta cada 0.5 ms
	OCR0A = 10;
 282:	8a e0       	ldi	r24, 0x0A	; 10
 284:	87 bd       	out	0x27, r24	; 39
	// Se habilita la interrupcion COMP A
	TIMSK0 |= (1<<OCIE0A);
 286:	ee e6       	ldi	r30, 0x6E	; 110
 288:	f0 e0       	ldi	r31, 0x00	; 0
 28a:	80 81       	ld	r24, Z
 28c:	82 60       	ori	r24, 0x02	; 2
 28e:	80 83       	st	Z, r24
	
	// Inicializo variables
	DELTA = 0;
 290:	10 92 82 01 	sts	0x0182, r1	; 0x800182 <DELTA>
	cuenta = 0;
 294:	10 92 81 01 	sts	0x0181, r1	; 0x800181 <cuenta>
 298:	08 95       	ret

0000029a <SetCT_Red>:
}

// Configuracion del ciclo de trabajo
void SetCT_Red(uint8_t comp){
	DELTA = comp;
 29a:	80 93 82 01 	sts	0x0182, r24	; 0x800182 <DELTA>
 29e:	08 95       	ret

000002a0 <SetCT_Green>:
}
void SetCT_Green(uint8_t comp){
	OCR1B = comp;
 2a0:	90 e0       	ldi	r25, 0x00	; 0
 2a2:	90 93 8b 00 	sts	0x008B, r25	; 0x80008b <__TEXT_REGION_LENGTH__+0x7f808b>
 2a6:	80 93 8a 00 	sts	0x008A, r24	; 0x80008a <__TEXT_REGION_LENGTH__+0x7f808a>
 2aa:	08 95       	ret

000002ac <SetCT_Blue>:
}
void SetCT_Blue(uint8_t comp){
	OCR1A = comp;
 2ac:	90 e0       	ldi	r25, 0x00	; 0
 2ae:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
 2b2:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
 2b6:	08 95       	ret

000002b8 <SerialPort_Init>:

}

void SerialPort_TX_Interrupt_Disable(void)
{
	UCSR0B &=~(1<<UDRIE0);
 2b8:	10 92 c1 00 	sts	0x00C1, r1	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7f80c1>
 2bc:	96 e0       	ldi	r25, 0x06	; 6
 2be:	90 93 c2 00 	sts	0x00C2, r25	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7f80c2>
 2c2:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7f80c5>
 2c6:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f80c4>
 2ca:	08 95       	ret

000002cc <SerialPort_TX_Enable>:
 2cc:	e1 ec       	ldi	r30, 0xC1	; 193
 2ce:	f0 e0       	ldi	r31, 0x00	; 0
 2d0:	80 81       	ld	r24, Z
 2d2:	88 60       	ori	r24, 0x08	; 8
 2d4:	80 83       	st	Z, r24
 2d6:	08 95       	ret

000002d8 <SerialPort_RX_Enable>:


// Inicializaciï¿½n de Receptor

void SerialPort_RX_Enable(void){
	UCSR0B |= (1<<RXEN0);
 2d8:	e1 ec       	ldi	r30, 0xC1	; 193
 2da:	f0 e0       	ldi	r31, 0x00	; 0
 2dc:	80 81       	ld	r24, Z
 2de:	80 61       	ori	r24, 0x10	; 16
 2e0:	80 83       	st	Z, r24
 2e2:	08 95       	ret

000002e4 <SerialPort_RX_Interrupt_Enable>:
}

void SerialPort_RX_Interrupt_Enable(void){
	UCSR0B |= (1<<RXCIE0);
 2e4:	e1 ec       	ldi	r30, 0xC1	; 193
 2e6:	f0 e0       	ldi	r31, 0x00	; 0
 2e8:	80 81       	ld	r24, Z
 2ea:	80 68       	ori	r24, 0x80	; 128
 2ec:	80 83       	st	Z, r24
 2ee:	08 95       	ret

000002f0 <SerialPort_Wait_For_TX_Buffer_Free>:
// Transmisiï¿½n

// Espera hasta que el buffer de TX este libre.
void SerialPort_Wait_For_TX_Buffer_Free(void){
	// Pooling - Bloqueante hasta que termine de transmitir.
	while(!(UCSR0A & (1<<UDRE0)));
 2f0:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
 2f4:	85 ff       	sbrs	r24, 5
 2f6:	fc cf       	rjmp	.-8      	; 0x2f0 <SerialPort_Wait_For_TX_Buffer_Free>
}
 2f8:	08 95       	ret

000002fa <SerialPort_Send_Data>:

void SerialPort_Send_Data(char data){
	UDR0 = data;
 2fa:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
 2fe:	08 95       	ret

00000300 <SerialPort_Send_String>:
}

void SerialPort_Send_String(char * msg){ //msg -> "Hola como andan hoy?" 20 ASCII+findecadena, tardo=20ms
 300:	ef 92       	push	r14
 302:	ff 92       	push	r15
 304:	0f 93       	push	r16
 306:	1f 93       	push	r17
 308:	cf 93       	push	r28
 30a:	7c 01       	movw	r14, r24
	uint8_t i = 0;
 30c:	c0 e0       	ldi	r28, 0x00	; 0
	//'\0' = 0x00
	while(msg[i]){ // *(msg+i)
 30e:	07 c0       	rjmp	.+14     	; 0x31e <SerialPort_Send_String+0x1e>
		SerialPort_Wait_For_TX_Buffer_Free(); //9600bps formato 8N1, 10bits, 10.Tbit=10/9600=1ms 
 310:	0e 94 78 01 	call	0x2f0	; 0x2f0 <SerialPort_Wait_For_TX_Buffer_Free>
		SerialPort_Send_Data(msg[i]);
 314:	f8 01       	movw	r30, r16
 316:	80 81       	ld	r24, Z
 318:	0e 94 7d 01 	call	0x2fa	; 0x2fa <SerialPort_Send_Data>
		i++;
 31c:	cf 5f       	subi	r28, 0xFF	; 255
}

void SerialPort_Send_String(char * msg){ //msg -> "Hola como andan hoy?" 20 ASCII+findecadena, tardo=20ms
	uint8_t i = 0;
	//'\0' = 0x00
	while(msg[i]){ // *(msg+i)
 31e:	87 01       	movw	r16, r14
 320:	0c 0f       	add	r16, r28
 322:	11 1d       	adc	r17, r1
 324:	f8 01       	movw	r30, r16
 326:	80 81       	ld	r24, Z
 328:	81 11       	cpse	r24, r1
 32a:	f2 cf       	rjmp	.-28     	; 0x310 <SerialPort_Send_String+0x10>
		SerialPort_Wait_For_TX_Buffer_Free(); //9600bps formato 8N1, 10bits, 10.Tbit=10/9600=1ms 
		SerialPort_Send_Data(msg[i]);
		i++;
	}
}
 32c:	cf 91       	pop	r28
 32e:	1f 91       	pop	r17
 330:	0f 91       	pop	r16
 332:	ff 90       	pop	r15
 334:	ef 90       	pop	r14
 336:	08 95       	ret

00000338 <_exit>:
 338:	f8 94       	cli

0000033a <__stop_program>:
 33a:	ff cf       	rjmp	.-2      	; 0x33a <__stop_program>
